name: CI Pipeline

on:
  push:
    tags:
      - "v*"  # Triggers when a tag like "v1.0", "v2.3" is pushedd

env:
  PROJECT_NAME: ${{ vars.PROJECT_NAME }}
  REGISTRY: ghcr.io/${{ secrets.REGISTRY_USERNAME }}
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Dependencies
        run: npm install

      - name: Run Server Test
        run: |
          nohup npm run start &
          sleep 5
          curl -f http://localhost:3200

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Latest Tag
        id: get_version
        run: |
          NEW_TAG=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          
      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ghcr.io -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

      - name: Build and push Docker Image
        run: |
          PROJECT_NAME="ghcr.io/${{ github.repository_owner }}/myprojects"
          PROJECT_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
          docker build -t $PROJECT_NAME:$NEW_TAG -f docker/Dockerfile .
          docker push $PROJECT_NAME:$NEW_TAG
 
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Get Latest Tag
        id: get_version
        run: |
          NEW_TAG=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
      - name: Install ArgoCD CLI  # âœ… Add this step
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd
      - name: Deploy to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure
          argocd account get-user-info
          argocd app set $PROJECT_NAME --helm-set image.tag=$NEW_TAG
          argocd app sync $PROJECT_NAME
          argocd app logs $PROJECT_NAME
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}